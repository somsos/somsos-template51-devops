name: template51

networks:
  net51:
    driver: bridge
    ipam:
      config:
        - subnet: 172.30.0.0/24
          gateway: 172.30.0.1



services:

  db:
    container_name: ${DB_SERVICE_NAME}
    image: postgres:17.2-alpine3.21
    command: ["postgres", "-c", "log_statement=all"]
    restart: unless-stopped
    networks:
      net51:
        ipv4_address: ${DB_IP}
    ports:
      - "${DB_PORT}:5432"
    volumes:
      - ./data_postgres:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "PGDATABASE=${POSTGRES_DB} pg_isready -U ${POSTGRES_USER} -h localhost"]
      interval: 20s
      timeout: 5s
      retries: 5



  back:
    container_name: ${BACK_SERVICE_NAME}
    build: ./back
    image: ${BACK_IMAGE_NAME}
    restart: unless-stopped
    ports:
      - "${BACK_PORT}:8080"
    networks:
      net51:
        ipv4_address: ${BACK_IP}
    extra_hosts:
      - "host.docker.internal:host-gateway"
    depends_on:
      - db
    healthcheck:
      test: ["CMD-SHELL", "wget --spider -q http://localhost:8080/actuator/health && echo servicesAlive"]
      interval: 20s
      retries: 5



  front:
    container_name: ${FRONT_SERVICE_NAME}
    build: ./front
    image: ${FRONT_IMAGE_NAME}
    restart: unless-stopped
    ports:
      - "${FRONT_PORT}:80"
    networks:
      net51:
        ipv4_address: ${FRONT_IP}
    depends_on:
      - back
    healthcheck:
      test: ["CMD-SHELL", "wget --spider -q http://127.0.0.1 && echo servicesAlive"]
      interval: 20s
      retries: 5



  gitea:
    container_name: gitea
    image: docker.gitea.com/gitea:1.23.8
    environment:
      - USER_UID=1000
      - USER_GID=1000
    restart: unless-stopped
    volumes:
      - ./data_gitea:/data
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    ports:
      - "${GITEA_PORT}:3000"
      - "222:22"
    networks:
      net51:
        ipv4_address: ${GITEA_IP}
    extra_hosts:
      - "host.docker.internal:host-gateway"





  #CAREFUL: Might give file permissions error if does run: "sudo chown -R 1000:1000 ./data_jenkins"
  jenkins:
    container_name: jenkins
    build:
      context: .
      dockerfile: jenkins-with-docker.dockerfile
    privileged: true
    ports:
      - "${JENKINS_PORT}:8080"
    volumes:
# main folder where it wil be all the generated content of jenkins
      - ./data_jenkins:/var/jenkins_home
# We give access to docker host to jenkins container and sync time
      - .secrets/ssh:/root/.ssh:ro
      - /var/run/docker.sock:/var/run/docker.sock
      - /usr/bin/docker:/usr/local/bin/docker
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    networks:
      net51:
        ipv4_address: ${JENKINS_IP}
    extra_hosts:
      - "host.docker.internal:host-gateway"

